<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jake Thompson on Jake Thompson</title>
    <link>https://wjakethompson.github.io/</link>
    <description>Recent content in Jake Thompson on Jake Thompson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 W. Jake Thompson</copyright>
    <lastBuildDate>Fri, 28 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Construct Irrelevant Variance</title>
      <link>https://wjakethompson.github.io/publication/2018-construct-irrelevant-variance/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/publication/2018-construct-irrelevant-variance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Hierarchical IRT Model for Identifying Group Level Aberrant Growth to Detect Cheating</title>
      <link>https://wjakethompson.github.io/publication/2017-brussow-cots/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/publication/2017-brussow-cots/</guid>
      <description></description>
    </item>
    
    <item>
      <title>jayhawkdown</title>
      <link>https://wjakethompson.github.io/project/jayhawkdown/</link>
      <pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/project/jayhawkdown/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tidy Sports Analytics, Part 4: tidyverse</title>
      <link>https://wjakethompson.github.io/post/tidy-sports-analytics-tidyverse/</link>
      <pubDate>Fri, 25 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/post/tidy-sports-analytics-tidyverse/</guid>
      <description>&lt;p&gt;This is the final post in the tidy sports analytics series, in which I’ve been using play-by-play from the 2016 NFL season to demonstrate the power of the &lt;a href=&#34;http://www.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;&lt;/a&gt;. Previously, I’ve discussed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-dplyr/index.html&#34;&gt;Part 1&lt;/a&gt;: Data manipulation using &lt;strong&gt;dplyr&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-tidyr/index.html&#34;&gt;Part 2&lt;/a&gt;: Data reshaping and tidying using &lt;strong&gt;tidyr&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-ggplot2/index.html&#34;&gt;Part 3&lt;/a&gt;: Data visualization using &lt;strong&gt;ggplot2&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post I want to talk about the &lt;strong&gt;tidyverse&lt;/strong&gt; more generally, and some of other advantages of using these packages for data analysis.&lt;/p&gt;
&lt;div id=&#34;tidyverse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;tidyverse&lt;/h2&gt;
&lt;p&gt;Although I chose three of the main &lt;strong&gt;tidyverse&lt;/strong&gt; packages to highlight in these posts, there are many more packages that fall under this umbrella. In addition to &lt;a href=&#34;http://dplyr.tidyverse.org/&#34;&gt;&lt;strong&gt;dplyr&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;http://tidyr.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyr&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;http://ggplot2.tidyverse.org/&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt;, the core &lt;strong&gt;tidyverse&lt;/strong&gt; also includes &lt;a href=&#34;http://readr.tidyverse.org/&#34;&gt;&lt;strong&gt;readr&lt;/strong&gt;&lt;/a&gt; for reading in data, &lt;a href=&#34;http://purrr.tidyverse.org/&#34;&gt;&lt;strong&gt;purrr&lt;/strong&gt;&lt;/a&gt; for functional programming, and &lt;a href=&#34;http://tibble.tidyverse.org/&#34;&gt;&lt;strong&gt;tibble&lt;/strong&gt;&lt;/a&gt; for a new type of data frame. There are also packages &lt;a href=&#34;http://www.tidyverse.org/packages/&#34;&gt;outside of the core&lt;/a&gt; &lt;strong&gt;tidyverse&lt;/strong&gt; for importing data, wrangling data, programming, and modeling. These packages are all used for more specific use cases, rather than the general use of the core packages. For example, &lt;a href=&#34;http://lubridate.tidyverse.org/&#34;&gt;&lt;strong&gt;lubridate&lt;/strong&gt;&lt;/a&gt; is used for date-time variables, &lt;a href=&#34;http://magrittr.tidyverse.org/&#34;&gt;&lt;strong&gt;magrittr&lt;/strong&gt;&lt;/a&gt; provides the forward pipe (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) along with other piping operations, and &lt;a href=&#34;https://github.com/tidyverse/glue&#34;&gt;&lt;strong&gt;glue&lt;/strong&gt;&lt;/a&gt; makes it easier to combine string and date variables.&lt;/p&gt;
&lt;p&gt;Because all of these packages use a consistent API, they are all compatible with the pipe operator, making data analysis more stream lined and also more reproducible. By using the pipe operator, your code becomes more readable for others. This makes code reviews by others easier, and makes your research more reproducible if people external to the project can understand what you were doing.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;community-support&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Community support&lt;/h2&gt;
&lt;p&gt;In addition to the programming benefits of the &lt;strong&gt;tidyverse&lt;/strong&gt;, there is a supportive community that contributes to the development of the &lt;strong&gt;tidyverse&lt;/strong&gt; packages and environment. The “tidyverse” tags on &lt;a href=&#34;https://twitter.com/search?q=%23tidyverse&amp;amp;src=typd&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://stackoverflow.com/questions/tagged/tidyverse&#34;&gt;Stack Overflow&lt;/a&gt; are great places to go for help. Here, you’ll be able to ask your questions and get feedback to help solve your problems, or clarify any questions you might have.&lt;/p&gt;
&lt;p&gt;In addition, there are many developers that are creating &lt;strong&gt;tidyverse&lt;/strong&gt; adjacent packages. These packages aren’t technically part of the &lt;strong&gt;tidyverse&lt;/strong&gt;, but enhance and further functionality. For example, there is a large development environment around &lt;strong&gt;ggplot2&lt;/strong&gt;. These &lt;a href=&#34;http://www.ggplot2-exts.org/&#34;&gt;extensions to &lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt; provide additional compatible tools such as &lt;a href=&#34;https://github.com/thomasp85/ggraph&#34;&gt;network graphs&lt;/a&gt;, &lt;a href=&#34;https://github.com/clauswilke/ggjoy&#34;&gt;joy plots&lt;/a&gt;, and &lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34;&gt;animation&lt;/a&gt;. Another good example is the &lt;a href=&#34;https://github.com/juliasilge/tidytext&#34;&gt;&lt;strong&gt;tidytext&lt;/strong&gt;&lt;/a&gt; package, which is used for analyzing text passages.&lt;/p&gt;
&lt;p&gt;However, these are not the only ways to &lt;a href=&#34;http://www.tidyverse.org/contribute/&#34;&gt;contribute to the &lt;strong&gt;tidyverse&lt;/strong&gt;&lt;/a&gt;. You don’t have to be a developer or even be able to answer questions on Twitter or Stack Overflow in order to contribute. You can also contribute by using the &lt;a href=&#34;http://reprex.tidyverse.org/&#34;&gt;&lt;strong&gt;reprex&lt;/strong&gt;&lt;/a&gt; package to report issues that you find, or contribute documentation to existing packages. No matter how advanced your &lt;em&gt;R&lt;/em&gt; skills are, there are ways for you to not only use the &lt;strong&gt;tidyverse&lt;/strong&gt;, but also contribute to the community!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;tidyverse&lt;/strong&gt; is a great resource for the greater &lt;em&gt;R&lt;/em&gt; community. This group of packages provide tools for data science that have a consistent API, and greatly improve the readability and reproducibility of your code. In these posts, I used NFL play-by-play data as a use case to show how the main components of the &lt;strong&gt;tidyverse&lt;/strong&gt; work. With the huge amount of data that is now available for analyzing sports data, the &lt;strong&gt;tidyverse&lt;/strong&gt; is able to efficiently wrangle and manipulate data with just a few lines of code, making it an invaluable resource. For more &lt;strong&gt;tidyverse&lt;/strong&gt; resources, checkout:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tidyverse.org/&#34;&gt;tidyverse.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;&lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;RStudio cheatsheets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidy Sports Analytics, Part 3: ggplot2</title>
      <link>https://wjakethompson.github.io/post/tidy-sports-analytics-ggplot2/</link>
      <pubDate>Thu, 20 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/post/tidy-sports-analytics-ggplot2/</guid>
      <description>&lt;p&gt;This is the third post in the tidy sports analytics series. In this series, I’ve been demonstrating how the collection of &lt;a href=&#34;http://www.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;&lt;/a&gt; packages can be used to explore and analyze sports data. Specifically, I’ve been using the 2016 NFL play-by-play data from &lt;a href=&#34;http://armchairanalysis.com/&#34;&gt;Armchair Analysis&lt;/a&gt;. &lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-dplyr/index.hmtl&#34;&gt;Part one&lt;/a&gt; in the series showed how &lt;strong&gt;dplyr&lt;/strong&gt; can be used for data manipulation, and &lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-tidyr/index.html&#34;&gt;part two&lt;/a&gt; demonstrated reshaping and tidying data using &lt;strong&gt;tidyr&lt;/strong&gt;. This post focuses on data visualization using &lt;a href=&#34;http://ggplot2.tidyverse.org/&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;ggplot2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ggplot2&lt;/h2&gt;
&lt;p&gt;Data visualization is a key part to any data or sports analytics analysis. In the &lt;strong&gt;tidyverse&lt;/strong&gt; visualization is mainly handled through &lt;strong&gt;ggplot2&lt;/strong&gt;. There is an ongoing debate in the &lt;em&gt;R&lt;/em&gt; community as to whether base graphics or &lt;strong&gt;ggplot2&lt;/strong&gt; should be used (see &lt;a href=&#34;http://simplystatistics.org/2016/02/11/why-i-dont-use-ggplot2/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;http://varianceexplained.org/r/why-I-use-ggplot2/&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;http://flowingdata.com/2016/03/22/comparing-ggplot2-and-r-base-graphics/&#34;&gt;here&lt;/a&gt;). In practice you, should use whichever tools are going to be effective you. Both sets of tools will be able to solve a wide variety of visualization tools, just in different ways. Given that this series of blog posts is focused on using the &lt;strong&gt;tidyverse&lt;/strong&gt;, it’s probably obvious that I prefer &lt;strong&gt;ggplot2&lt;/strong&gt;. But rather than try to compare and contrast these to systems, in this post, I’m going to point out a few features that I think make &lt;strong&gt;ggplot2&lt;/strong&gt; particularly appealing as I demonstrate how it can be used to visualize sports analytics data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt; is built around the idea of a grammar of graphics. That is, rather than having a typology of visualizations (e.g., scatter plot, bar plot, histogram, etc.), the grammar of graphics focused on on the individual pieces of a plot, and a visualization is created by assembling the various parts that have been selected. &lt;strong&gt;ggplot2&lt;/strong&gt; works by mapping the data to different aesthetics in the plot, and then adding graphical elements, or geoms.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-ggplot2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using ggplot2&lt;/h2&gt;
&lt;p&gt;First, let’s get our data to point where it was at the end of the &lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-tidyr/index.html&#34;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

success &amp;lt;- readRDS(&amp;quot;datafiles/nfl_pbp_2016.rds&amp;quot;) %&amp;gt;%
  select(game_id = gid, play_id = pid, offense = off, defense = def,
         play_type = type, down = dwn, to_go = ytg, gained = yds) %&amp;gt;%
  filter(play_type %in% c(&amp;quot;PASS&amp;quot;, &amp;quot;RUSH&amp;quot;)) %&amp;gt;%
  mutate(
    needed = case_when(
      down == 1 ~ to_go * 0.45,
      down == 2 ~ to_go * 0.60,
      TRUE ~ to_go * 1.00
    ),
    play_success = case_when(
      gained &amp;gt;= needed ~ TRUE,
      gained &amp;lt; needed ~ FALSE
    )
  ) %&amp;gt;%
  gather(key = &amp;quot;team_unit&amp;quot;, value = &amp;quot;team&amp;quot;, offense:defense) %&amp;gt;%
  mutate(
    play_success = case_when(
      team_unit == &amp;quot;defense&amp;quot; ~ !play_success,
      TRUE ~ play_success
    )
  ) %&amp;gt;%
  group_by(team, team_unit) %&amp;gt;%
  summarize(success_rate = mean(play_success, na.rm = TRUE)) %&amp;gt;%
  spread(key = team_unit, value = success_rate) %&amp;gt;%
  ungroup()
success
#&amp;gt; # A tibble: 32 x 3
#&amp;gt;     team   defense   offense
#&amp;gt;  * &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
#&amp;gt;  1   ARI 0.5786228 0.4579350
#&amp;gt;  2   ATL 0.5122349 0.4995587
#&amp;gt;  3   BAL 0.5800416 0.4103053
#&amp;gt;  4   BUF 0.5530612 0.4643226
#&amp;gt;  5   CAR 0.5420466 0.4197044
#&amp;gt;  6   CHI 0.5497436 0.4606383
#&amp;gt;  7   CIN 0.5582090 0.4638256
#&amp;gt;  8   CLE 0.5456292 0.4089422
#&amp;gt;  9   DAL 0.5212766 0.5110048
#&amp;gt; 10   DEN 0.5936293 0.4234694
#&amp;gt; # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first plot we can make is a scatter plot of offensive success rate vs. defensive success rate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = success, mapping = aes(x = defense, y = offense)) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:scatter&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://wjakethompson.github.io/post/2017-07-20-tidy-sports-analytics-part-3-ggplot2_files/figure-html/scatter-1.png&#34; alt=&#34;Basic scatterplot&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Basic scatterplot
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here, I define the data that will be used for the plot, and then define how the variables in the data map to the plot. Specifically, I want defensive success rate on the x-axis, and offensive success rate on the y-axis. Finally, I use &lt;code&gt;geom_point&lt;/code&gt; to add points at each of (x, y) coordinates defined in the aesthetic mapping. In Figure &lt;a href=&#34;#fig:scatter&#34;&gt;1&lt;/a&gt;, it appears that there is a general trend of a more successful defense being associated with a less successful offense. We can look at this trend by using &lt;code&gt;geom_smooth&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = success, mapping = aes(x = defense, y = offense)) +
  geom_point() +
  geom_smooth(method = &amp;quot;lm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:smooth&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://wjakethompson.github.io/post/2017-07-20-tidy-sports-analytics-part-3-ggplot2_files/figure-html/smooth-1.png&#34; alt=&#34;Scatterplot with linear best fit line&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Scatterplot with linear best fit line
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With &lt;strong&gt;ggplot&lt;/strong&gt;, it’s easy to add extra elements to customize the specific pieces needed for the visualization. Each geom also comes with its own options. For example in &lt;code&gt;geom_smooth&lt;/code&gt;, I’ve specified the &lt;code&gt;&amp;quot;lm&amp;quot;&lt;/code&gt; smoothing method. We can also specify groupings in the plots. For this, the data will need to be in long format, which can be accomplished using the &lt;code&gt;gather&lt;/code&gt; function as we did in &lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-tidyr/index.html&#34;&gt;part two&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- gather(success, key = &amp;quot;team_unit&amp;quot;, value = &amp;quot;success_rate&amp;quot;,
  defense:offense)
success
#&amp;gt; # A tibble: 64 x 3
#&amp;gt;     team team_unit success_rate
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
#&amp;gt;  1   ARI   defense    0.5786228
#&amp;gt;  2   ATL   defense    0.5122349
#&amp;gt;  3   BAL   defense    0.5800416
#&amp;gt;  4   BUF   defense    0.5530612
#&amp;gt;  5   CAR   defense    0.5420466
#&amp;gt;  6   CHI   defense    0.5497436
#&amp;gt;  7   CIN   defense    0.5582090
#&amp;gt;  8   CLE   defense    0.5456292
#&amp;gt;  9   DAL   defense    0.5212766
#&amp;gt; 10   DEN   defense    0.5936293
#&amp;gt; # ... with 54 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Figure &lt;a href=&#34;#fig:afc-west&#34;&gt;3&lt;/a&gt; shows how we can make a grouped bar plot. First we filter the data to only include teams in the AFC West. This limits the number of teams that will need to be fitted on the x-axis. The &lt;code&gt;success_rate&lt;/code&gt; is then mapped to the y-axis, and I specify that I want the fill of the bar to correspond to the offense and defense. Finally, &lt;code&gt;geom_col&lt;/code&gt; is uses to make the bars. By default, stacked bars are created, but &lt;code&gt;position = &amp;quot;dodge&amp;quot;&lt;/code&gt; instead groups them side by side. Notice the &lt;strong&gt;ggplot2&lt;/strong&gt; will automatically create the legend for you.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(data = filter(success, team %in% c(&amp;quot;DEN&amp;quot;, &amp;quot;KC&amp;quot;, &amp;quot;OAK&amp;quot;, &amp;quot;SD&amp;quot;)),
       mapping = aes(x = team, y = success_rate, fill = team_unit)) +
  geom_col(position = &amp;quot;dodge&amp;quot;) +
  scale_fill_discrete(name = &amp;quot;Team Unit&amp;quot;) +
  labs(x = NULL, y = &amp;quot;Success Rate&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span id=&#34;fig:afc-west&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://wjakethompson.github.io/post/2017-07-20-tidy-sports-analytics-part-3-ggplot2_files/figure-html/afc-west-1.png&#34; alt=&#34;AFC West success rates&#34; width=&#34;80%&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: AFC West success rates
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is an almost &lt;a href=&#34;http://ggplot2.tidyverse.org/reference/index.html#section-layer-geoms&#34;&gt;endless series of geoms&lt;/a&gt; that can be combined to make the desired visualization. Everything in these plots can be customized. From colors, to titles and labels (as was done in Figure &lt;a href=&#34;#fig:afc-west&#34;&gt;3&lt;/a&gt;), and even fonts can be changed. However, this goes beyond the scope of this post. Instead, I wanted to show easy it can be to use &lt;strong&gt;ggplot2&lt;/strong&gt; to create professional looking graphics.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;ggplot2&lt;/strong&gt; package is a powerful tool for data visualization. Here I’ve provided a brief introduction to how this package works. Once you’ve mastered the basics, it becomes much simpler to create more complex graphics. Because of the grammar of graphics, the creation of plots can be reduced to the selection of relevant geoms, and mapping the data to the necessary aesthetics. In the next and final post in this series, I’ll pull everything together, and talk about the &lt;strong&gt;tidyverse&lt;/strong&gt; more generally, and some of the other benefits associated with its use. For more &lt;strong&gt;ggplot2&lt;/strong&gt; resources, check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ggplot2.tidyverse.org/&#34;&gt;ggplot2.tidyverse.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r4ds.had.co.nz/data-visualisation.html&#34;&gt;&lt;em&gt;R for Data Science&lt;/em&gt;, Data Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r4ds.had.co.nz/graphics-for-communication.html&#34;&gt;&lt;em&gt;R for Data Science&lt;/em&gt;, Graphics for Communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/ggplot2-Elegant-Graphics-Data-Analysis/dp/331924275X/ref=as_li_ss_tl?ie=UTF8&amp;amp;linkCode=sl1&amp;amp;tag=ggplot2-20&amp;amp;linkId=4b4de5146fdafd09b8035e8aa656f300&#34;&gt;&lt;em&gt;ggplot2: Elegant Graphics for Data Analysis&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating an R package for a Reproducible Workflow in Educational Assessment.</title>
      <link>https://wjakethompson.github.io/publication/2017-user-dlmr/</link>
      <pubDate>Sat, 01 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/publication/2017-user-dlmr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tidy Sports Analytics, Part 2: tidyr</title>
      <link>https://wjakethompson.github.io/post/tidy-sports-analytics-tidyr/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/post/tidy-sports-analytics-tidyr/</guid>
      <description>&lt;p&gt;This is the second in a series of posts that demonstrates how the &lt;a href=&#34;http://www.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;&lt;/a&gt; can be used to easily explore and analyze NFL play-by-play data. In &lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-dplyr/index.html&#34;&gt;part one&lt;/a&gt;, I used the &lt;strong&gt;dplyr&lt;/strong&gt; package to the success rate of each NFL offense in during the 2016 season. However, when we left off, I noted that really we should look at the success rate of offenses and defenses in order to get a better idea of which teams were the best overall. For this, I’ll use the &lt;a href=&#34;http://tidyr.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyr&lt;/strong&gt;&lt;/a&gt; package, which is main &lt;strong&gt;tidyverse&lt;/strong&gt; package for tidying data. But first, let’s talk about the pipe operator.&lt;/p&gt;
&lt;div id=&#34;embrace-the-pipe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Embrace the pipe&lt;/h2&gt;
&lt;p&gt;The pip operator (&lt;code&gt;%&amp;gt;%&lt;/code&gt;) comes from the &lt;a href=&#34;http://magrittr.tidyverse.org/&#34;&gt;&lt;strong&gt;magrittr&lt;/strong&gt;&lt;/a&gt; package, and is used to make code more readable. Compare the following two chunks of code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

nfl_pbp &amp;lt;- readRDS(&amp;quot;datafiles/nfl_pbp_2016.rds&amp;quot;)

success &amp;lt;- filter(select(nfl_pbp, game_id = gid, play_id = pid, offense = off,
                         defense = def, play_type = type, down = dwn,
                         to_go = ytg, gained = yds),
                  play_type %in% c(&amp;quot;PASS&amp;quot;, &amp;quot;RUSH&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

nfl_pbp &amp;lt;- readRDS(&amp;quot;datafiles/nfl_pbp_2016.rds&amp;quot;)

success &amp;lt;- nfl_pbp %&amp;gt;%
  select(game_id = gid, play_id = pid, offense = off, defense = def,
         play_type = type, down = dwn, to_go = ytg, gained = yds) %&amp;gt;%
  filter(play_type %in% c(&amp;quot;PASS&amp;quot;, &amp;quot;RUSH&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both code chunks read in the data and do some initial manipulations to calculate success rate using the &lt;strong&gt;dplyr&lt;/strong&gt; package (see &lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-dplyr/index.html&#34;&gt;part one&lt;/a&gt; of this series for a more in depth explanation of how these functions work). In the first chunk, it is difficult to easily see what is going on. You have to read inside-out in order to see that I first select some variables from &lt;code&gt;nfl_pbp&lt;/code&gt; and then filter. However, in the second chunk, it is very clear that I start with the &lt;code&gt;nfl_pbp&lt;/code&gt; data, select some variables, and then filter to only passing and rushing plays.&lt;/p&gt;
&lt;p&gt;The pipe works by passing the output of the function on the left as the first argument to the function on the right. So &lt;code&gt;a %&amp;gt;% f(x, y) %&amp;gt;% g(z)&lt;/code&gt; is interpreted by the computer as &lt;code&gt;g(f(a, x, y), z)&lt;/code&gt;. These two statements are equivalent, but in the first, it is much easier to see that &lt;code&gt;a&lt;/code&gt; is pass to function &lt;code&gt;f()&lt;/code&gt;, which also has arguments &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and then the output of that is pass to function &lt;code&gt;g()&lt;/code&gt;, which also has argument &lt;code&gt;z&lt;/code&gt;. In the &lt;strong&gt;tidyverse&lt;/strong&gt;, the first argument is always the data frame that the operation is being performed on, and a data frame with the specified operation performed is returned. Thus, all of the &lt;strong&gt;tidyverse&lt;/strong&gt; functions are compatible with the &lt;code&gt;%&amp;gt;%&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;Throughout the rest of this post, and the following posts in this series, we’ll use the &lt;code&gt;%&amp;gt;%&lt;/code&gt; to make the code more readable and straight forward.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;tidyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;tidyr&lt;/h2&gt;
&lt;p&gt;In this post, I’ll be using the &lt;strong&gt;tidyr&lt;/strong&gt; package to calculate the success rate of the offense and defense of each team. Let’s remind ourselves what the data looks like.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success
#&amp;gt; # A tibble: 34,149 x 8
#&amp;gt;    game_id play_id offense defense play_type  down to_go gained
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
#&amp;gt;  1    4257  697182     DEN     CAR      PASS     1    10     11
#&amp;gt;  2    4257  697183     DEN     CAR      PASS     1    10      0
#&amp;gt;  3    4257  697184     DEN     CAR      PASS     2    10      0
#&amp;gt;  4    4257  697185     DEN     CAR      PASS     3    10     12
#&amp;gt;  5    4257  697186     DEN     CAR      PASS     1    10      5
#&amp;gt;  6    4257  697187     DEN     CAR      RUSH     2     5     13
#&amp;gt;  7    4257  697188     DEN     CAR      RUSH     1    10      5
#&amp;gt;  8    4257  697189     DEN     CAR      RUSH     2     5      0
#&amp;gt;  9    4257  697190     CAR     DEN      RUSH     1    10      6
#&amp;gt; 10    4257  697191     CAR     DEN      RUSH     2     4     11
#&amp;gt; # ... with 34,139 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the previous post, we grouped the data frame by offense in order to calculate success rate. Now, we want to group by team and offensive or defensive unit to calculate success rate. The problem we face is that there is no &lt;code&gt;unit&lt;/code&gt; variable. Instead, the unit information is split across two columns: &lt;code&gt;offense&lt;/code&gt; and &lt;code&gt;defense&lt;/code&gt;. This is where the &lt;strong&gt;tidyr&lt;/strong&gt; package comes into play. There are two main functions within &lt;strong&gt;tidyr&lt;/strong&gt; that are used for tidying data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gather&lt;/code&gt;: collapse multiple columns into key-value pairs;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spread&lt;/code&gt;: split key-value pairs into multiple columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll demonstrate how both of these functions are used in our analysis of NFL success rates.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-tidyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using tidyr&lt;/h2&gt;
&lt;p&gt;Before we start using the &lt;strong&gt;tidyr&lt;/strong&gt; package, let’s calculate whether each play was a success or not using the processes from the &lt;a href=&#34;https://wjakethompson.github.io/post/tidy-sports-analytics-dplyr/index.html&#34;&gt;previous post&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- success %&amp;gt;%
  mutate(
    needed = case_when(
      down == 1 ~ to_go * 0.45,
      down == 2 ~ to_go * 0.60,
      TRUE ~ to_go * 1.00
    ),
    play_success = case_when(
      gained &amp;gt;= needed ~ TRUE,
      gained &amp;lt; needed ~ FALSE
    )
  )
success
#&amp;gt; # A tibble: 34,149 x 10
#&amp;gt;    game_id play_id offense defense play_type  down to_go gained needed
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt;  1    4257  697182     DEN     CAR      PASS     1    10     11    4.5
#&amp;gt;  2    4257  697183     DEN     CAR      PASS     1    10      0    4.5
#&amp;gt;  3    4257  697184     DEN     CAR      PASS     2    10      0    6.0
#&amp;gt;  4    4257  697185     DEN     CAR      PASS     3    10     12   10.0
#&amp;gt;  5    4257  697186     DEN     CAR      PASS     1    10      5    4.5
#&amp;gt;  6    4257  697187     DEN     CAR      RUSH     2     5     13    3.0
#&amp;gt;  7    4257  697188     DEN     CAR      RUSH     1    10      5    4.5
#&amp;gt;  8    4257  697189     DEN     CAR      RUSH     2     5      0    3.0
#&amp;gt;  9    4257  697190     CAR     DEN      RUSH     1    10      6    4.5
#&amp;gt; 10    4257  697191     CAR     DEN      RUSH     2     4     11    2.4
#&amp;gt; # ... with 34,139 more rows, and 1 more variables: play_success &amp;lt;lgl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to calculate the success rate for each team and unit combination, we first need to gather the unit information into key-value pairs using the &lt;code&gt;gather&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success %&amp;gt;%
  gather(key = &amp;quot;team_unit&amp;quot;, value = &amp;quot;team&amp;quot;, offense:defense)
#&amp;gt; # A tibble: 68,298 x 10
#&amp;gt;    game_id play_id play_type  down to_go gained needed play_success
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;        &amp;lt;lgl&amp;gt;
#&amp;gt;  1    4257  697182      PASS     1    10     11    4.5         TRUE
#&amp;gt;  2    4257  697183      PASS     1    10      0    4.5        FALSE
#&amp;gt;  3    4257  697184      PASS     2    10      0    6.0        FALSE
#&amp;gt;  4    4257  697185      PASS     3    10     12   10.0         TRUE
#&amp;gt;  5    4257  697186      PASS     1    10      5    4.5         TRUE
#&amp;gt;  6    4257  697187      RUSH     2     5     13    3.0         TRUE
#&amp;gt;  7    4257  697188      RUSH     1    10      5    4.5         TRUE
#&amp;gt;  8    4257  697189      RUSH     2     5      0    3.0        FALSE
#&amp;gt;  9    4257  697190      RUSH     1    10      6    4.5         TRUE
#&amp;gt; 10    4257  697191      RUSH     2     4     11    2.4         TRUE
#&amp;gt; # ... with 68,288 more rows, and 2 more variables: team_unit &amp;lt;chr&amp;gt;,
#&amp;gt; #   team &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When using the &lt;code&gt;gather&lt;/code&gt; function, the column names of the collapsed columns become the “key”, and the values are the “value”. In the function, I chose to name the column of keys &lt;code&gt;team_unit&lt;/code&gt; and the column of values &lt;code&gt;team&lt;/code&gt;. I then specified which columns should be collapsed. Each column can be named individually (i.e., &lt;code&gt;c(offense, defense)&lt;/code&gt;), or you can specify all columns in a range (i.e., &lt;code&gt;offense:defense&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Next, as I noted last time, play success is calculated such that I measures whether the play was a success for the offense. This means that if a play was successful for an offense it was unsuccessful for the defense, and vice versa. Therefore we need to reverse the decision of whether or not a play was successful, if the unit is the defense.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success %&amp;gt;%
  gather(key = &amp;quot;team_unit&amp;quot;, value = &amp;quot;team&amp;quot;, offense:defense) %&amp;gt;%
  mutate(
    play_success = case_when(
      team_unit == &amp;quot;defense&amp;quot; ~ !play_success,
      TRUE ~ play_success
    )
  )
#&amp;gt; # A tibble: 68,298 x 10
#&amp;gt;    game_id play_id play_type  down to_go gained needed play_success
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;        &amp;lt;lgl&amp;gt;
#&amp;gt;  1    4257  697182      PASS     1    10     11    4.5         TRUE
#&amp;gt;  2    4257  697183      PASS     1    10      0    4.5        FALSE
#&amp;gt;  3    4257  697184      PASS     2    10      0    6.0        FALSE
#&amp;gt;  4    4257  697185      PASS     3    10     12   10.0         TRUE
#&amp;gt;  5    4257  697186      PASS     1    10      5    4.5         TRUE
#&amp;gt;  6    4257  697187      RUSH     2     5     13    3.0         TRUE
#&amp;gt;  7    4257  697188      RUSH     1    10      5    4.5         TRUE
#&amp;gt;  8    4257  697189      RUSH     2     5      0    3.0        FALSE
#&amp;gt;  9    4257  697190      RUSH     1    10      6    4.5         TRUE
#&amp;gt; 10    4257  697191      RUSH     2     4     11    2.4         TRUE
#&amp;gt; # ... with 68,288 more rows, and 2 more variables: team_unit &amp;lt;chr&amp;gt;,
#&amp;gt; #   team &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, I’m saying if the &lt;code&gt;team_unit&lt;/code&gt; for the observation is equal to defense, &lt;code&gt;play_success&lt;/code&gt; is equal to the opposite of the current value of play success. If &lt;code&gt;play_success&lt;/code&gt; is not equal to defense, then the value is unchanged. We can now group by &lt;code&gt;team&lt;/code&gt; and &lt;code&gt;team_unit&lt;/code&gt; to calculate the success rate of each offense and defense.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success %&amp;gt;%
  gather(key = &amp;quot;team_unit&amp;quot;, value = &amp;quot;team&amp;quot;, offense:defense) %&amp;gt;%
  mutate(
    play_success = case_when(
      team_unit == &amp;quot;defense&amp;quot; ~ !play_success,
      TRUE ~ play_success
    )
  ) %&amp;gt;%
  group_by(team, team_unit) %&amp;gt;%
  summarize(success_rate = mean(play_success, na.rm = TRUE))
#&amp;gt; # A tibble: 64 x 3
#&amp;gt; # Groups:   team [?]
#&amp;gt;     team team_unit success_rate
#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
#&amp;gt;  1   ARI   defense    0.5786228
#&amp;gt;  2   ARI   offense    0.4579350
#&amp;gt;  3   ATL   defense    0.5122349
#&amp;gt;  4   ATL   offense    0.4995587
#&amp;gt;  5   BAL   defense    0.5800416
#&amp;gt;  6   BAL   offense    0.4103053
#&amp;gt;  7   BUF   defense    0.5530612
#&amp;gt;  8   BUF   offense    0.4643226
#&amp;gt;  9   CAR   defense    0.5420466
#&amp;gt; 10   CAR   offense    0.4197044
#&amp;gt; # ... with 54 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I want to spread the data frame back out so there is only one row per team. This is where the &lt;code&gt;spread&lt;/code&gt; function comes into play.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success %&amp;gt;%
  gather(key = &amp;quot;team_unit&amp;quot;, value = &amp;quot;team&amp;quot;, offense:defense) %&amp;gt;%
  mutate(
    play_success = case_when(
      team_unit == &amp;quot;defense&amp;quot; ~ !play_success,
      TRUE ~ play_success
    )
  ) %&amp;gt;%
  group_by(team, team_unit) %&amp;gt;%
  summarize(success_rate = mean(play_success, na.rm = TRUE)) %&amp;gt;%
  spread(key = team_unit, value = success_rate)
#&amp;gt; # A tibble: 32 x 3
#&amp;gt; # Groups:   team [32]
#&amp;gt;     team   defense   offense
#&amp;gt;  * &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
#&amp;gt;  1   ARI 0.5786228 0.4579350
#&amp;gt;  2   ATL 0.5122349 0.4995587
#&amp;gt;  3   BAL 0.5800416 0.4103053
#&amp;gt;  4   BUF 0.5530612 0.4643226
#&amp;gt;  5   CAR 0.5420466 0.4197044
#&amp;gt;  6   CHI 0.5497436 0.4606383
#&amp;gt;  7   CIN 0.5582090 0.4638256
#&amp;gt;  8   CLE 0.5456292 0.4089422
#&amp;gt;  9   DAL 0.5212766 0.5110048
#&amp;gt; 10   DEN 0.5936293 0.4234694
#&amp;gt; # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;spread&lt;/code&gt; function took the key-value pairs and spread them out into their own columns. Now we’re back to one row per team, so it’s easier to see the success rate of each unit for all of the teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post shows how the &lt;strong&gt;tidyr&lt;/strong&gt; package, which is main the data tidying package in the &lt;strong&gt;tidyverse&lt;/strong&gt;, can be used to quickly reshape data in order to perform. In the next post, I’m going to demonstrate how the &lt;strong&gt;ggplot2&lt;/strong&gt; package can be used to visualize these results. For more &lt;strong&gt;tidyr&lt;/strong&gt; resources, check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tidyr.tidyverse.org/&#34;&gt;tidyr.tidyverse.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r4ds.had.co.nz/tidy-data.html&#34;&gt;&lt;em&gt;R for Data Science&lt;/em&gt;, Tidy Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vita.had.co.nz/papers/tidy-data.html&#34;&gt;Tidy Data, &lt;em&gt;Journal of Statistical Software&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidy Sports Analytics, Part 1: dplyr</title>
      <link>https://wjakethompson.github.io/post/tidy-sports-analytics-dplyr/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/post/tidy-sports-analytics-dplyr/</guid>
      <description>&lt;p&gt;Welcome to the first in a series of blog posts where I’ll be using sports data to demonstrate the power of the &lt;a href=&#34;http://www.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;&lt;/a&gt; tools for sports analytics. The &lt;strong&gt;tidyverse&lt;/strong&gt; is a suite of packages developed mainly by &lt;a href=&#34;https://twitter.com/hadleywickham&#34;&gt;Hadley Wickham&lt;/a&gt;, with contributions from over 100 other people in the &lt;em&gt;R&lt;/em&gt; community. The goal of the &lt;strong&gt;tidyverse&lt;/strong&gt; is to provide easy to use &lt;em&gt;R&lt;/em&gt; packages for a data science workflow that all follow a consistent philosophy and APIs. In each post in this series, I’ll be focusing on one package within the &lt;strong&gt;tidyverse&lt;/strong&gt; in order to demonstrate how each of the major pieces of the &lt;strong&gt;tidyverse&lt;/strong&gt; works. In all of the posts, I’ll be exploring the play-by-play data for every game of the 2016 NFL season. This data comes from &lt;a href=&#34;http://armchairanalysis.com/&#34;&gt;Armchair Analysis&lt;/a&gt;, which is behind a pay wall. However, for a a one time flat rate, you can have access to their historical database with yearly updates forever.&lt;/p&gt;
&lt;p&gt;This post will focus on the &lt;a href=&#34;http://dplyr.tidyverse.org/&#34;&gt;&lt;strong&gt;dplyr&lt;/strong&gt;&lt;/a&gt; package, which is used for data manipulation.&lt;/p&gt;
&lt;div id=&#34;dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;dplyr&lt;/h2&gt;
&lt;p&gt;Before we get into how &lt;strong&gt;dplyr&lt;/strong&gt; works, let’s first load in our data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

nfl_pbp &amp;lt;- readRDS(&amp;quot;datafiles/nfl_pbp_2016.rds&amp;quot;)
nfl_pbp
#&amp;gt; # A tibble: 44,385 x 30
#&amp;gt;      gid    pid   off   def  type  dseq   len   qtr   min   sec  ptso
#&amp;gt;    &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt;  1  4257 697181   DEN   CAR  KOFF     0     6     1    15     0     0
#&amp;gt;  2  4257 697182   DEN   CAR  PASS     1    30     1    15     0     0
#&amp;gt;  3  4257 697183   DEN   CAR  PASS     2     4     1    14    17     0
#&amp;gt;  4  4257 697184   DEN   CAR  PASS     3     5     1    14    13     0
#&amp;gt;  5  4257 697185   DEN   CAR  PASS     4    26     1    14     8     0
#&amp;gt;  6  4257 697186   DEN   CAR  PASS     5    41     1    13    42     0
#&amp;gt;  7  4257 697187   DEN   CAR  RUSH     6    38     1    13     1     0
#&amp;gt;  8  4257 697188   DEN   CAR  RUSH     7    36     1    12    23     0
#&amp;gt;  9  4257 697189   DEN   CAR  RUSH     8    10     1    11    47     0
#&amp;gt; 10  4257 697190   CAR   DEN  RUSH     1    36     1    11    37     0
#&amp;gt; # ... with 44,375 more rows, and 19 more variables: ptsd &amp;lt;int&amp;gt;,
#&amp;gt; #   timo &amp;lt;int&amp;gt;, timd &amp;lt;int&amp;gt;, dwn &amp;lt;int&amp;gt;, ytg &amp;lt;int&amp;gt;, yfog &amp;lt;int&amp;gt;, zone &amp;lt;int&amp;gt;,
#&amp;gt; #   fd &amp;lt;int&amp;gt;, sg &amp;lt;int&amp;gt;, nh &amp;lt;int&amp;gt;, pts &amp;lt;int&amp;gt;, tck &amp;lt;int&amp;gt;, sk &amp;lt;int&amp;gt;,
#&amp;gt; #   pen &amp;lt;int&amp;gt;, ints &amp;lt;int&amp;gt;, fum &amp;lt;int&amp;gt;, saf &amp;lt;int&amp;gt;, blk &amp;lt;int&amp;gt;, yds &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we can see that there were a total of 44,385 plays in the 2016 NFL season, and we have 30 variables for each play. The &lt;strong&gt;dplyr&lt;/strong&gt; package provides a way to manipulate this data so that we can easily answer questions. There are five main functions that &lt;strong&gt;dplyr&lt;/strong&gt; provides that take care of the majority of data manipulation tasks that you might have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt;: sort the data by a variable or set of variables;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: select which observations to include;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt;: create new variables as functions of existing variables;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;: choose variables by name;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarize&lt;/code&gt;: calculate group level summaries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To demonstrate how these functions work, I will calculate the rate of successful plays for each team. For the NFL, we’ll consider a play successful if the team gains 45 percent of the needed yards on 1st down, 60 percent on 2nd down, and 100 percent on 3rd or 4th down (this comes from Bob Carroll, Pete Palmer, and John Thorn in &lt;a href=&#34;https://www.amazon.com/Hidden-Game-Football-Bob-Carroll/dp/0446514144&#34;&gt;&lt;em&gt;The Hidden Game of Football&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;using-dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using dplyr&lt;/h2&gt;
&lt;p&gt;First I’ll pull out the variables that are needed using the &lt;code&gt;select&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- select(nfl_pbp, game_id = gid, play_id = pid, offense = off,
  defense = def, play_type = type, down = dwn, to_go = ytg, gained = yds)
success
#&amp;gt; # A tibble: 44,385 x 8
#&amp;gt;    game_id play_id offense defense play_type  down to_go gained
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
#&amp;gt;  1    4257  697181     DEN     CAR      KOFF     0     0     NA
#&amp;gt;  2    4257  697182     DEN     CAR      PASS     1    10     11
#&amp;gt;  3    4257  697183     DEN     CAR      PASS     1    10      0
#&amp;gt;  4    4257  697184     DEN     CAR      PASS     2    10      0
#&amp;gt;  5    4257  697185     DEN     CAR      PASS     3    10     12
#&amp;gt;  6    4257  697186     DEN     CAR      PASS     1    10      5
#&amp;gt;  7    4257  697187     DEN     CAR      RUSH     2     5     13
#&amp;gt;  8    4257  697188     DEN     CAR      RUSH     1    10      5
#&amp;gt;  9    4257  697189     DEN     CAR      RUSH     2     5      0
#&amp;gt; 10    4257  697190     CAR     DEN      RUSH     1    10      6
#&amp;gt; # ... with 44,375 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that in the &lt;code&gt;select&lt;/code&gt; statement I not only chose the variable I wanted, but also gave them new names that more clearly convey the information included in that variable. For example, I chose to keep the unique game identifier, but renamed it from &lt;code&gt;gid&lt;/code&gt; to &lt;code&gt;game_id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we need to filter out plays that don’t fall into our operational definition of success. For example, under the definition above, how would we determine if a kickoff was successful? Therefore, I will use the &lt;code&gt;filter&lt;/code&gt; function to select only passing or rushing plays.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- filter(success, play_type %in% c(&amp;quot;PASS&amp;quot;, &amp;quot;RUSH&amp;quot;))
success
#&amp;gt; # A tibble: 34,149 x 8
#&amp;gt;    game_id play_id offense defense play_type  down to_go gained
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;
#&amp;gt;  1    4257  697182     DEN     CAR      PASS     1    10     11
#&amp;gt;  2    4257  697183     DEN     CAR      PASS     1    10      0
#&amp;gt;  3    4257  697184     DEN     CAR      PASS     2    10      0
#&amp;gt;  4    4257  697185     DEN     CAR      PASS     3    10     12
#&amp;gt;  5    4257  697186     DEN     CAR      PASS     1    10      5
#&amp;gt;  6    4257  697187     DEN     CAR      RUSH     2     5     13
#&amp;gt;  7    4257  697188     DEN     CAR      RUSH     1    10      5
#&amp;gt;  8    4257  697189     DEN     CAR      RUSH     2     5      0
#&amp;gt;  9    4257  697190     CAR     DEN      RUSH     1    10      6
#&amp;gt; 10    4257  697191     CAR     DEN      RUSH     2     4     11
#&amp;gt; # ... with 34,139 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This leaves us with 34,149 plays. The next step is to calculate the number of yards needed in order for the play to be deemed successful. This can be done using the &lt;code&gt;mutate&lt;/code&gt; function along with the &lt;code&gt;case_when&lt;/code&gt; function. The &lt;code&gt;case_when&lt;/code&gt; function acts like a series of if statements to determine the proper condition.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- mutate(success, needed = case_when(
  down == 1 ~ to_go * 0.45,
  down == 2 ~ to_go * 0.60,
  TRUE ~ to_go * 1.00
))
success
#&amp;gt; # A tibble: 34,149 x 9
#&amp;gt;    game_id play_id offense defense play_type  down to_go gained needed
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt;  1    4257  697182     DEN     CAR      PASS     1    10     11    4.5
#&amp;gt;  2    4257  697183     DEN     CAR      PASS     1    10      0    4.5
#&amp;gt;  3    4257  697184     DEN     CAR      PASS     2    10      0    6.0
#&amp;gt;  4    4257  697185     DEN     CAR      PASS     3    10     12   10.0
#&amp;gt;  5    4257  697186     DEN     CAR      PASS     1    10      5    4.5
#&amp;gt;  6    4257  697187     DEN     CAR      RUSH     2     5     13    3.0
#&amp;gt;  7    4257  697188     DEN     CAR      RUSH     1    10      5    4.5
#&amp;gt;  8    4257  697189     DEN     CAR      RUSH     2     5      0    3.0
#&amp;gt;  9    4257  697190     CAR     DEN      RUSH     1    10      6    4.5
#&amp;gt; 10    4257  697191     CAR     DEN      RUSH     2     4     11    2.4
#&amp;gt; # ... with 34,139 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this chunk, I’m saying if the down is equal to 1, then the yards needed is equal to 45 percent of the yards to go. If the down isn’t equal to 1, then we go to the second condition. Now, if the down is equal to 2, the yards needed is equal to 60 percent of the yards to go. Finally, if the down isn’t equal to 2, then we go to the final condition which says that for all other downs, yards needed is equal to 100 percent of the yards to go. We can then determine which plays were a success by using mutate again to calculate if the yards gained is greater than the yards needed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- mutate(success, play_success = case_when(
  gained &amp;gt;= needed ~ TRUE,
  gained &amp;lt; needed ~ FALSE
))
success
#&amp;gt; # A tibble: 34,149 x 10
#&amp;gt;    game_id play_id offense defense play_type  down to_go gained needed
#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
#&amp;gt;  1    4257  697182     DEN     CAR      PASS     1    10     11    4.5
#&amp;gt;  2    4257  697183     DEN     CAR      PASS     1    10      0    4.5
#&amp;gt;  3    4257  697184     DEN     CAR      PASS     2    10      0    6.0
#&amp;gt;  4    4257  697185     DEN     CAR      PASS     3    10     12   10.0
#&amp;gt;  5    4257  697186     DEN     CAR      PASS     1    10      5    4.5
#&amp;gt;  6    4257  697187     DEN     CAR      RUSH     2     5     13    3.0
#&amp;gt;  7    4257  697188     DEN     CAR      RUSH     1    10      5    4.5
#&amp;gt;  8    4257  697189     DEN     CAR      RUSH     2     5      0    3.0
#&amp;gt;  9    4257  697190     CAR     DEN      RUSH     1    10      6    4.5
#&amp;gt; 10    4257  697191     CAR     DEN      RUSH     2     4     11    2.4
#&amp;gt; # ... with 34,139 more rows, and 1 more variables: play_success &amp;lt;lgl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we’ve calculated whether each play was a success, we can calculate the overall success rate for each team. To do this, we need to group our data by team. This can be accomplished using the &lt;code&gt;group_by&lt;/code&gt; function. This function do anything to the data, but will allow other functions to operate within each of the groups. Specifically, I will use the &lt;code&gt;summarize&lt;/code&gt; function to calculate the rate of successful plays within each group.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- group_by(success, team = offense)
success &amp;lt;- summarize(success, success_rate = mean(play_success, na.rm = TRUE))
success
#&amp;gt; # A tibble: 32 x 2
#&amp;gt;     team success_rate
#&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
#&amp;gt;  1   ARI    0.4579350
#&amp;gt;  2   ATL    0.4995587
#&amp;gt;  3   BAL    0.4103053
#&amp;gt;  4   BUF    0.4643226
#&amp;gt;  5   CAR    0.4197044
#&amp;gt;  6   CHI    0.4606383
#&amp;gt;  7   CIN    0.4638256
#&amp;gt;  8   CLE    0.4089422
#&amp;gt;  9   DAL    0.5110048
#&amp;gt; 10   DEN    0.4234694
#&amp;gt; # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I will use the &lt;code&gt;arrange&lt;/code&gt; function to sort this data set by the success rate, allowing us to see which teams were the most successful on average. Note that I use the &lt;code&gt;desc&lt;/code&gt; function to sort success rate in a descending manner, so that the teams with the highest success rates are first. By default the &lt;code&gt;arrange&lt;/code&gt; function sorts ascending.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;success &amp;lt;- arrange(success, desc(success_rate))
success
#&amp;gt; # A tibble: 32 x 2
#&amp;gt;     team success_rate
#&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;
#&amp;gt;  1    NO    0.5176252
#&amp;gt;  2   DAL    0.5110048
#&amp;gt;  3   ATL    0.4995587
#&amp;gt;  4   WAS    0.4776876
#&amp;gt;  5    GB    0.4775614
#&amp;gt;  6   IND    0.4707661
#&amp;gt;  7   TEN    0.4688458
#&amp;gt;  8   BUF    0.4643226
#&amp;gt;  9   CIN    0.4638256
#&amp;gt; 10   PIT    0.4613445
#&amp;gt; # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One consideration from these results is that I grouped by the offensive team. Thus, this represents how often the teams’ offenses were successful. To evaluate a team overall, you would also want to examine defensive success rates. However, these results do seem to make intuitive sense, as the top three teams (New Orleans, Dallas, and Atlanta), all had very good offenses last season.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This post shows how the &lt;strong&gt;dplyr&lt;/strong&gt; package, which is main the data manipulation package in the &lt;strong&gt;tidyverse&lt;/strong&gt;, can be used to quickly manipulate and analyze data with just a few lines of code. In the upcoming posts I’ll be using the &lt;strong&gt;tidyr&lt;/strong&gt; package to help tidy data and &lt;strong&gt;ggplot2&lt;/strong&gt; to visualize data. For more &lt;strong&gt;dplyr&lt;/strong&gt; resources, check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dplyr.tidyverse.org/&#34;&gt;dplyr.tidyverse.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r4ds.had.co.nz/transform.html&#34;&gt;&lt;em&gt;R for Data Science&lt;/em&gt;, Data Transformation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing different levels of compensation in multidimensional item response theory models</title>
      <link>https://wjakethompson.github.io/publication/2017-emip-graphic/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/publication/2017-emip-graphic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Integrating Blogdown with GitHub Pages and Travis-CI</title>
      <link>https://wjakethompson.github.io/post/blogdown-gh-pages-travis-ci/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/post/blogdown-gh-pages-travis-ci/</guid>
      <description>&lt;p&gt;I recently converted my website from &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; to &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; with &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt;. If you haven’t tried out &lt;strong&gt;blogdown&lt;/strong&gt; yet, Yihui Xie just hosted a &lt;a href=&#34;https://www.rstudio.com/resources/webinars/introducing-blogdown/&#34;&gt;webinar&lt;/a&gt; that does a great job of introducing the package. This post won’t focus on how to use &lt;strong&gt;blogdown&lt;/strong&gt; to create a website, but rather how to host that website on GitHub pages and use Travis-CI to automatically update the website. For this post, I’m assuming that you’re making a user or organization site. However, the changes for a project site are fairly straightforward, and I’ll point those out as we go through the example.&lt;/p&gt;
&lt;div id=&#34;step-1-create-your-website&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 1: Create your website&lt;/h2&gt;
&lt;p&gt;This is probably the most important and time consuming step, so naturally I’ll be spending the least amount of time on it. There are extensive resources already for how to create and modify a &lt;strong&gt;blogdown&lt;/strong&gt; website (for example &lt;a href=&#34;https://www.rstudio.com/resources/webinars/introducing-blogdown/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;here&lt;/a&gt;). I will note two specific settings that are important. First, when creating the &lt;strong&gt;blogdown&lt;/strong&gt; project in RStudio, initialize a git repository. Second, because Hugo never cleans up the &lt;code&gt;public/&lt;/code&gt; directory, old pages that you no longer wish to be published will still be present in that directory. Therefore, I suggest adding “public” to the .gitignore file. If you aren’t using RStudio, you can accomplish these tasks by executing the following commands in your terminal (assuming you are in the directory of your project)&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Initialize git repository
git init

# Create .gitignore with &amp;quot;public&amp;quot;
echo &amp;quot;public&amp;quot; &amp;gt; .gitignore

# Commit .gitignore
git add .gitignore
git commit -m &amp;quot;add .gitignore&amp;quot;

# Commit website files
git add --all
git commit -m &amp;quot;initial website commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At the end of this step, you should have a directory with all of the website files (e.g., &lt;code&gt;blogdown/&lt;/code&gt;, &lt;code&gt;content/&lt;/code&gt;, &lt;code&gt;public/&lt;/code&gt;, &lt;code&gt;themes/&lt;/code&gt;, etc.), and a local git repository that you’ve committed all of the files to. Note that we haven’t pushed anything to a remote repository on GitHub yet. That is what comes next!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2-push-files-to-github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 2: Push files to GitHub&lt;/h2&gt;
&lt;p&gt;Now that you have a website that is ready to be published, we can push the files to GitHub. However, we face a complication in that for user or organization pages, the content has to be built from the &lt;code&gt;master&lt;/code&gt; branch. This means that we’ll have to do a little extra work to make things publish correctly. I should note that there is more than one way to do this. Amber Thomas outlined one way this can be accomplished &lt;a href=&#34;https://proquestionasker.github.io/blog/Making_Site/&#34;&gt;here&lt;/a&gt;. However, this involves creating sub-branches inside the public folder. As someone is far from an expert in git and GitHub I found this process to be very confusing, and despite my best efforts, I always ended up with merge conflicts that were difficult for me to trace. So here I outline a different strategy based on the instructions Yihui provided for &lt;a href=&#34;https://bookdown.org/yihui/bookdown/github.html&#34;&gt;hosting a &lt;strong&gt;bookdown&lt;/strong&gt; book&lt;/a&gt; that I think is more straightforward.&lt;/p&gt;
&lt;p&gt;First, we need to create a new repository by logging into GitHub and going to &lt;a href=&#34;https://github.com/new&#34; class=&#34;uri&#34;&gt;https://github.com/new&lt;/a&gt;. For user and organization pages, the repository name must be &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; (for me this is &lt;code&gt;wjakethompson.github.io&lt;/code&gt;). For project pages, this can be anything you want. Add a description if you want, and then accept the default settings of the repository (i.e., don’t initialize with a README, .gitignore, or license).&lt;/p&gt;
&lt;p&gt;Now, back on our local machine, we’ll make a new branch called &lt;code&gt;sources&lt;/code&gt;, and make this the default branch. Then, delete the &lt;code&gt;master&lt;/code&gt; branch. To push the &lt;code&gt;sources&lt;/code&gt; branch to GitHub, we’ll add the remote repository, and then push (you may have to authenticate GitHub if you haven’t done this before).&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Create sources branch
git branch -b sources

# Make sources the default branch
git symbolic-ref HEAD refs/heads/sources

# Delete the master branch
git branch -d master

# Add remote repository
git remote add origin https://github.com/&amp;lt;username&amp;gt;/&amp;lt;repo-name&amp;gt;.git

# Verify remote
git remote -v

# Push sources to remote
git push -u origin sources&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you go look at the repository on GitHub, you should see that there is one branch (&lt;code&gt;sources&lt;/code&gt;), that has all of the files in your local directory (except for the &lt;code&gt;public/&lt;/code&gt; directory and any other files in your .gitignore).&lt;/p&gt;
&lt;p&gt;Now we need to publish the static files from the public folder to a new master branch. We create a new branch called &lt;code&gt;master&lt;/code&gt; and then remove all files from this branch. Then we can add a file called .nojekyll that tell GitHub pages not to use Jekyll to build the website (Hugo has already generated the static files for us). We can then commit this file and push to the master branch in our remote repository.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# Create master branch and clean all files
git checkout --orphan master
git rm -rf .

# Create file to tell GitHub not to use Jekyll
touch .nojekyll

# Push master branch to remote
git add .nojekyll
git commit -m &amp;quot;initial commit&amp;quot;
git push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you look at the GitHub repository, you should see there are two branches, and when you look at the &lt;code&gt;master&lt;/code&gt; branch, you’ll only see the .nojekyll file.&lt;/p&gt;
&lt;p&gt;If you’re creating a project page instead of a user or organization page, you can skip moving everything to a &lt;code&gt;sources&lt;/code&gt; branch and just leave in on the &lt;code&gt;master&lt;/code&gt; branch. Then, instead of creating a new branch called &lt;code&gt;master&lt;/code&gt; containing the .nojekyll file, name the new branch &lt;code&gt;gh-pages&lt;/code&gt;, and in the last line use &lt;code&gt;git push origin gh-pages&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3-let-travis-ci-build-the-website&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 3: Let Travis-CI build the website&lt;/h2&gt;
&lt;p&gt;Travis is a continuous integration software. Essentially, it’s a virtual machine that can run commands for you, and it’s free for public GitHub repositories. To activate Travis for your website, log in to &lt;a href=&#34;https://travis-ci.org/&#34; class=&#34;uri&#34;&gt;https://travis-ci.org/&lt;/a&gt; using your GitHub account. Then under your name at the top, click “Accounts”, and then turn on your website’s repository.&lt;/p&gt;
&lt;p&gt;There a few things you’ll need to do in order to make Travis work for building your website. First, you need to grant Travis write access to your repository. To do this, create a &lt;a href=&#34;https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/&#34;&gt;personal access token&lt;/a&gt; on GitHub. Then go to &lt;a href=&#34;https://travis-ci.org/username/repo-name/settings&#34; class=&#34;uri&#34;&gt;https://travis-ci.org/username/repo-name/settings&lt;/a&gt;, and create a new environment variable called &lt;code&gt;GITHUB_PAT&lt;/code&gt; with the personal access token you just generated. Alternatively, you can use the Travis command line tool to encrypt your GitHub token using &lt;code&gt;travis encrypt GITHUB_PAT=TOKEN&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, there are four files that you’ll need to add to the top level of your website directory. The first two are &lt;code&gt;_build.sh&lt;/code&gt; and &lt;code&gt;_deploy.sh&lt;/code&gt;. These are the scripts that Travis will execute to build and deploy your website whenever you push changes to GitHub. Because the &lt;code&gt;public/&lt;/code&gt; directory isn’t in your git repository (by design), we have to build the website on Travis. This can be done with build script that looks like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/sh

Rscript -e &amp;quot;blogdown::install_hugo(); blogdown::build_site(local = FALSE,
  method = &amp;#39;html_encoded&amp;#39;)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We first make sure that Hugo is installed on Travis, and then build the website using &lt;code&gt;blogdown::build_site&lt;/code&gt;. For my website I use &lt;code&gt;method = &#39;html_encoded&#39;&lt;/code&gt;, but you can change this to whichever method you prefer. This will create a &lt;code&gt;public/&lt;/code&gt; directory on the virtual Travis machine. We can then publish the files in this directory to our &lt;code&gt;master&lt;/code&gt; branch on GitHub using the deploy script.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/sh

set -e

[ -z &amp;quot;${GITHUB_PAT}&amp;quot; ] &amp;amp;&amp;amp; exit 0
[ &amp;quot;${TRAVIS_BRANCH}&amp;quot; != &amp;quot;sources&amp;quot; ] &amp;amp;&amp;amp; exit 0

# Configure GitHub username and email
git config --global user.email &amp;quot;your_email@email.com&amp;quot;
git config --global user.name &amp;quot;Your Name&amp;quot;

# Clone repository into blog-output directory
git clone -b master \
  https://${GITHUB_PAT}@github.com/${TRAVIS_REPO_SLUG}.git \
  blog-output

# Move to blog-output directory
cd blog-output

# Copy website files from public/ to blog-output/
cp -r ../public/* ./

# Add and commit files to the master branch
git add --all *
git commit -m &amp;quot;Update the blog&amp;quot; || true
git push -q origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the deploy script we first do some checks to make sure the script should run (e.g., &lt;code&gt;GITHUB_PAT&lt;/code&gt; is defined, the &lt;code&gt;sources&lt;/code&gt; branch is being built). Then we configure our username and email for GitHub, these should match what you used to set up your GitHub account. Once the setup is complete, we clone the &lt;code&gt;master&lt;/code&gt; branch into a new &lt;code&gt;blog-output/&lt;/code&gt; directory, and copy the contents of the &lt;code&gt;public/&lt;/code&gt; directory (which was created in the build script) to the &lt;code&gt;blog-output/&lt;/code&gt; directory as well. Finally we add, commit, and push all of these files to the &lt;code&gt;master&lt;/code&gt; branch. Once the files are on the &lt;code&gt;master&lt;/code&gt; branch, the website will be hosted!&lt;/p&gt;
&lt;p&gt;There are two more files that need to be in place for this to work. The first is a DESCRIPTION file. Because Travis is normally used for checking &lt;em&gt;R&lt;/em&gt; packages, it requires a DESCRIPTION file to be present in order to know what packages to install as dependencies. This doesn’t need to be a full DESCRIPTION file given that this is only being used for Travis, so you might have a file that looks like this:&lt;/p&gt;
&lt;pre class=&#34;dcf&#34;&gt;&lt;code&gt;Package: username.github.io
Title: My blog!
Version: 1.0
URL: https://github.com/username/username.github.io
Imports:
  blogdown,
  ggplot2,
  knitr
Remotes:
  rstudio/blogdown,
  tidyverse/ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important thing to note is that if a dependency isn’t on CRAN (like &lt;strong&gt;blogdown&lt;/strong&gt; for instance) it needs to be listed under &lt;code&gt;Remotes&lt;/code&gt;. Any package listed under &lt;code&gt;Remotes&lt;/code&gt; will be installed from GitHub using &lt;strong&gt;devtools&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The final file you need is a &lt;code&gt;.travis.yml&lt;/code&gt; file. This is the file tells Travis what it’s supposed to be doing. The &lt;code&gt;travis.yml&lt;/code&gt; file for my website looks like this:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;language: R
pandoc_version: 1.17.2
cache: packages
repos:
  CRAN: https://cran.rstudio.com/
  KRAN: http://rweb.crmda.ku.edu/kran/

before_script:
  - chmod +x ./_build.sh
  - chmod +x ./_deploy.sh

script:
  - ./_build.sh
  - ./_deploy.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first section of commands sets up the Travis environment. Here we define the language we’re using, the version of &lt;em&gt;pandoc&lt;/em&gt; that we want, and the CRAN repositories that we want to use to download packages. We can also tell Travis to cache our packages so that they don’t have to be installed every time the website is built. If you used &lt;code&gt;travis encrypt&lt;/code&gt; for you GitHub token, you’ll need to add a section to define the encrypted token that looks like this:&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;env:
  global:
    - secure: ENCRYPTED_GITHUB_TOKEN&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;before_script&lt;/code&gt; we run two commands that ensure the &lt;code&gt;_build.sh&lt;/code&gt; and &lt;code&gt;_deploy.sh&lt;/code&gt; scripts can be run. Then in &lt;code&gt;script&lt;/code&gt;, we tell Travis to first run the build script and then the deploy script. Once all four of these files have been created, add and commit them using RStudio or the command line terminal (make sure you’re on the &lt;code&gt;sources&lt;/code&gt; branch), and then push to GitHub. Once you push you can go to the Travis repository and watch your build happen in real time. Once it completes, your website will be live!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-4-update-your-website&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 4: Update your website&lt;/h2&gt;
&lt;p&gt;Once you have GitHub and Travis set up, adding posts to your website or making changes is super easy. Just create new posts or edit old files, commit the changes, and when you’re ready to publish your changes, push to GitHub. Travis will automatically build and deploy every time you push. As an added perk, if you happen to make a change that breaks everything (as I have been known to do), Travis will send you an email letting you know that your build failed so you can go back and fix it.&lt;/p&gt;
&lt;p&gt;For an example of what the GitHub repository and all the scripts should look like to make this work, checkout the repository for my website at &lt;a href=&#34;https://github.com/wjakethompson/wjakethompson.github.io&#34; class=&#34;uri&#34;&gt;https://github.com/wjakethompson/wjakethompson.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Recreating the Datasaurus Dozen Using tweenr and ggplot2</title>
      <link>https://wjakethompson.github.io/post/datasaurus-dozen/</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/post/datasaurus-dozen/</guid>
      <description>&lt;p&gt;If you haven’t seen it yet, there’s a great example of why it’s always important to visualize your data making its way around the Twitter-verse.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
A great demonstration of why we need to plot the data and never trust statistics tables! &lt;a href=&#34;https://t.co/JyUb57v0or&#34;&gt;https://t.co/JyUb57v0or&lt;/a&gt; &lt;a href=&#34;https://t.co/hsivGZdpZ1&#34;&gt;pic.twitter.com/hsivGZdpZ1&lt;/a&gt;
&lt;/p&gt;
— Taha Yasseri (&lt;span class=&#34;citation&#34;&gt;@TahaYasseri&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/TahaYasseri/status/859084459127316480&#34;&gt;May 1, 2017&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Despite looking very different, all of these datasets have the same summary statistics to two decimal places. You can download the datasets, get details about the project, and read the whole paper by Justin Matejka and George Fitzmaurice &lt;a href=&#34;https://www.autodeskresearch.com/publications/samestats&#34;&gt;here&lt;/a&gt;. In this post, I’ll show how we can recreate the GIF from the above tweet using &lt;a href=&#34;https://github.com/thomasp85/tweenr&#34;&gt;&lt;strong&gt;tweenr&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34;&gt;&lt;strong&gt;gganimate&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;creating-the-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Creating the plots&lt;/h2&gt;
&lt;p&gt;The first step is to read in the data. The data has three variables: the dataset name, x, and y. I’ll define dataset as a factor so that the datasets will appear in the correct order in the animation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(forcats)

datasaurus &amp;lt;- read_table2(&amp;quot;datafiles/DatasaurusDozen.tsv&amp;quot;,
  col_names = TRUE, col_types = &amp;quot;cnn&amp;quot;) %&amp;gt;%
  mutate(dataset = as_factor(dataset))
datasaurus
#&amp;gt; # A tibble: 1,846 x 3
#&amp;gt;    dataset       x       y
#&amp;gt;     &amp;lt;fctr&amp;gt;   &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;
#&amp;gt;  1    dino 55.3846 97.1795
#&amp;gt;  2    dino 51.5385 96.0256
#&amp;gt;  3    dino 46.1538 94.4872
#&amp;gt;  4    dino 42.8205 91.4103
#&amp;gt;  5    dino 40.7692 88.3333
#&amp;gt;  6    dino 38.7179 84.8718
#&amp;gt;  7    dino 35.6410 79.8718
#&amp;gt;  8    dino 33.0769 77.5641
#&amp;gt;  9    dino 28.9744 74.4872
#&amp;gt; 10    dino 26.1538 71.4103
#&amp;gt; # ... with 1,836 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can view all of the datasets at once using &lt;code&gt;facet_wrap&lt;/code&gt; in &lt;a href=&#34;http://ggplot2.tidyverse.org/&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(datasaurus, aes(x = x, y = y)) +
  facet_wrap(~ dataset, nrow = 3) +
  geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://wjakethompson.github.io/post/2017-05-05-datasaurus-dozen_files/figure-html/all-vis-1.png&#34; width=&#34;80%&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hard to believe all of these datasets have the same summary statistics!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animating-the-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Animating the plots&lt;/h2&gt;
&lt;p&gt;For a first pass at animating these datasets, I’ll use the &lt;strong&gt;gganimate&lt;/strong&gt; package. This works just like &lt;strong&gt;ggplot&lt;/strong&gt; code above, just with an added &lt;code&gt;frame&lt;/code&gt; aesthetic and no &lt;code&gt;facet_wrap&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gganimate)

p &amp;lt;- ggplot(datasaurus, aes(x = x, y = y)) +
  geom_point(aes(frame = dataset))

animation::ani.options(interval = 1)
gganimate(p, title_frame = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure center&#34;&gt;
&lt;img src=&#34;https://wjakethompson.github.io/post/2017-05-05-datasaurus-dozen_files/figure-html/gganimate-.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;This is close, but not quite what I was looking for. This does indeed animate all of the datasets, but in order to duplicate the GIF above, I really want to see the points moving into their new positions for each dataset. To get this effect, I’ll use the &lt;strong&gt;tweenr&lt;/strong&gt; package. &lt;strong&gt;tweenr&lt;/strong&gt; takes in a list of dataframes, and then interpolates the transitions between the states.&lt;/p&gt;
&lt;p&gt;First, I’ll create a list of the datasets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n_datasaurus &amp;lt;- datasaurus %&amp;gt;%
  group_by(dataset) %&amp;gt;%
  nest() %&amp;gt;%
  add_row(dataset = &amp;quot;dino&amp;quot;, data = list(.$data[[1]]))
n_datasaurus
#&amp;gt; # A tibble: 14 x 2
#&amp;gt;       dataset               data
#&amp;gt;        &amp;lt;fctr&amp;gt;             &amp;lt;list&amp;gt;
#&amp;gt;  1       dino &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  2       away &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  3    h_lines &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  4    v_lines &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  5    x_shape &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  6       star &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  7 high_lines &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  8       dots &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt;  9     circle &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt; 10   bullseye &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt; 11   slant_up &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt; 12 slant_down &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt; 13 wide_lines &amp;lt;tibble [142 x 2]&amp;gt;
#&amp;gt; 14       dino &amp;lt;tibble [142 x 2]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve also added the dino dataset again at the bottom so that the GIF with start and end with that dataset, making it seamless. I’ll then use &lt;code&gt;tween_states&lt;/code&gt;, sending it the list of dataframes, and specifying the length of each state and transitions (I had to play around a bit with the numbers until I was happy with the final animation).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tween_datasaurus &amp;lt;- tween_states(n_datasaurus$data, tweenlength = 1,
  statelength = 0.5, ease = &amp;quot;sine-out&amp;quot;, nframe = 200) %&amp;gt;%
  as.tibble()
tween_datasaurus
#&amp;gt; # A tibble: 28,400 x 3
#&amp;gt;          x       y .frame
#&amp;gt;      &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
#&amp;gt;  1 55.3846 97.1795      1
#&amp;gt;  2 51.5385 96.0256      1
#&amp;gt;  3 46.1538 94.4872      1
#&amp;gt;  4 42.8205 91.4103      1
#&amp;gt;  5 40.7692 88.3333      1
#&amp;gt;  6 38.7179 84.8718      1
#&amp;gt;  7 35.6410 79.8718      1
#&amp;gt;  8 33.0769 77.5641      1
#&amp;gt;  9 28.9744 74.4872      1
#&amp;gt; 10 26.1538 71.4103      1
#&amp;gt; # ... with 28,390 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates a new dataframe with the added &lt;code&gt;.frame&lt;/code&gt; variable. I can then use the same &lt;strong&gt;gganimate&lt;/strong&gt; code from above, just specifying &lt;code&gt;.frame&lt;/code&gt; as the frame aesthetic instead of &lt;code&gt;dataset&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p &amp;lt;- ggplot(tween_datasaurus, aes(x = x, y = y)) +
  geom_point(aes(frame = .frame))

animation::ani.options(interval = 1 / 15)
gganimate(p, title_frame = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure center&#34;&gt;
&lt;img src=&#34;https://wjakethompson.github.io/post/2017-05-05-datasaurus-dozen_files/figure-html/tweenr-animation-.gif&#34;&gt;
&lt;/div&gt;
&lt;p&gt;And there you have it! Now we can see all of the points moving between each dataset!&lt;/p&gt;
&lt;p&gt;&lt;details&gt;&lt;summary&gt;Session info&lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()
#&amp;gt;  setting  value                       
#&amp;gt;  version  R version 3.4.1 (2017-01-27)
#&amp;gt;  system   x86_64, linux-gnu           
#&amp;gt;  ui       X11                         
#&amp;gt;  language (EN)                        
#&amp;gt;  collate  en_US.UTF-8                 
#&amp;gt;  tz       UTC                         
#&amp;gt;  date     2017-09-03                  
#&amp;gt; 
#&amp;gt;  package    * version    date       source                            
#&amp;gt;  animation  * 2.5        2017-09-01 Github (yihui/animation@60f50e3)  
#&amp;gt;  assertthat   0.2.0      2017-04-11 cran (@0.2.0)                     
#&amp;gt;  backports    1.1.0      2017-05-22 cran (@1.1.0)                     
#&amp;gt;  base       * 3.4.1      2017-07-20 local                             
#&amp;gt;  bindr        0.1        2016-11-13 cran (@0.1)                       
#&amp;gt;  bindrcpp   * 0.2        2017-06-17 cran (@0.2)                       
#&amp;gt;  blogdown     0.1.3      2017-09-01 Github (rstudio/blogdown@45860c7) 
#&amp;gt;  bookdown     0.5        2017-08-20 cran (@0.5)                       
#&amp;gt;  broom        0.4.2      2017-02-13 cran (@0.4.2)                     
#&amp;gt;  cellranger   1.1.0      2016-07-27 cran (@1.1.0)                     
#&amp;gt;  colorspace   1.3-2      2016-12-14 cran (@1.3-2)                     
#&amp;gt;  compiler     3.4.1      2017-07-20 local                             
#&amp;gt;  datasets   * 3.4.1      2017-07-20 local                             
#&amp;gt;  devtools     1.13.3     2017-08-02 CRAN (R 3.4.1)                    
#&amp;gt;  digest       0.6.12     2017-01-27 CRAN (R 3.4.1)                    
#&amp;gt;  dplyr      * 0.7.2      2017-07-20 cran (@0.7.2)                     
#&amp;gt;  evaluate     0.10.1     2017-06-24 cran (@0.10.1)                    
#&amp;gt;  forcats    * 0.2.0      2017-01-23 cran (@0.2.0)                     
#&amp;gt;  foreign      0.8-69     2017-06-22 CRAN (R 3.4.1)                    
#&amp;gt;  gganimate  * 0.1.0.9000 2017-09-01 Github (dgrtwo/gganimate@bf82002) 
#&amp;gt;  ggplot2    * 2.2.1      2016-12-30 cran (@2.2.1)                     
#&amp;gt;  glue         1.1.1      2017-06-21 cran (@1.1.1)                     
#&amp;gt;  graphics   * 3.4.1      2017-07-20 local                             
#&amp;gt;  grDevices  * 3.4.1      2017-07-20 local                             
#&amp;gt;  grid         3.4.1      2017-07-20 local                             
#&amp;gt;  gtable       0.2.0      2016-02-26 cran (@0.2.0)                     
#&amp;gt;  haven        1.1.0      2017-07-09 cran (@1.1.0)                     
#&amp;gt;  hms          0.3        2016-11-22 cran (@0.3)                       
#&amp;gt;  htmltools    0.3.6      2017-04-28 cran (@0.3.6)                     
#&amp;gt;  httr         1.3.1      2017-08-20 CRAN (R 3.4.1)                    
#&amp;gt;  jsonlite     1.5        2017-06-01 CRAN (R 3.4.1)                    
#&amp;gt;  knitr      * 1.17       2017-08-10 cran (@1.17)                      
#&amp;gt;  labeling     0.3        2014-08-23 cran (@0.3)                       
#&amp;gt;  lattice      0.20-35    2017-03-25 CRAN (R 3.4.1)                    
#&amp;gt;  lazyeval     0.2.0      2016-06-12 cran (@0.2.0)                     
#&amp;gt;  lubridate    1.6.0      2016-09-13 cran (@1.6.0)                     
#&amp;gt;  magrittr     1.5        2014-11-22 cran (@1.5)                       
#&amp;gt;  memoise      1.1.0      2017-04-21 CRAN (R 3.4.1)                    
#&amp;gt;  methods    * 3.4.1      2017-07-20 local                             
#&amp;gt;  mnormt       1.5-5      2016-10-15 cran (@1.5-5)                     
#&amp;gt;  modelr       0.1.1      2017-07-24 cran (@0.1.1)                     
#&amp;gt;  munsell      0.4.3      2016-02-13 cran (@0.4.3)                     
#&amp;gt;  nlme         3.1-131    2017-02-06 CRAN (R 3.4.1)                    
#&amp;gt;  parallel     3.4.1      2017-07-20 local                             
#&amp;gt;  pkgconfig    2.0.1      2017-03-21 cran (@2.0.1)                     
#&amp;gt;  plyr         1.8.4      2016-06-08 cran (@1.8.4)                     
#&amp;gt;  psych        1.7.5      2017-05-03 cran (@1.7.5)                     
#&amp;gt;  purrr      * 0.2.3      2017-08-02 cran (@0.2.3)                     
#&amp;gt;  R6           2.2.2      2017-06-17 CRAN (R 3.4.1)                    
#&amp;gt;  Rcpp         0.12.12    2017-07-15 cran (@0.12.12)                   
#&amp;gt;  readr      * 1.1.1      2017-05-16 cran (@1.1.1)                     
#&amp;gt;  readxl       1.0.0      2017-04-18 cran (@1.0.0)                     
#&amp;gt;  reshape2     1.4.2      2016-10-22 cran (@1.4.2)                     
#&amp;gt;  rlang        0.1.2      2017-08-09 cran (@0.1.2)                     
#&amp;gt;  rmarkdown    1.6.0.9003 2017-09-01 Github (rstudio/rmarkdown@fb3a614)
#&amp;gt;  rprojroot    1.2        2017-01-16 cran (@1.2)                       
#&amp;gt;  rvest        0.3.2      2016-06-17 cran (@0.3.2)                     
#&amp;gt;  scales       0.5.0      2017-08-24 cran (@0.5.0)                     
#&amp;gt;  stats      * 3.4.1      2017-07-20 local                             
#&amp;gt;  stringi      1.1.5      2017-04-07 cran (@1.1.5)                     
#&amp;gt;  stringr      1.2.0      2017-02-18 cran (@1.2.0)                     
#&amp;gt;  tibble     * 1.3.4      2017-08-22 cran (@1.3.4)                     
#&amp;gt;  tidyr      * 0.7.1      2017-09-01 cran (@0.7.1)                     
#&amp;gt;  tidyselect   0.2.0      2017-08-30 cran (@0.2.0)                     
#&amp;gt;  tidyverse  * 1.1.1      2017-01-27 cran (@1.1.1)                     
#&amp;gt;  tools        3.4.1      2017-07-20 local                             
#&amp;gt;  tweenr     * 0.1.5      2016-10-10 cran (@0.1.5)                     
#&amp;gt;  utils      * 3.4.1      2017-07-20 local                             
#&amp;gt;  withr        2.0.0      2017-07-28 CRAN (R 3.4.1)                    
#&amp;gt;  xml2         1.1.1      2017-01-24 cran (@1.1.1)                     
#&amp;gt;  yaml         2.1.14     2016-11-12 cran (@2.1.14)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Soccer predictions using Bayesian mixed effects models</title>
      <link>https://wjakethompson.github.io/project/soccer/</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/project/soccer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hawklytics</title>
      <link>https://wjakethompson.github.io/project/hawklytics/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/project/hawklytics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evaluating an initialization tool for student placement into a map-based assessment.</title>
      <link>https://wjakethompson.github.io/publication/2017-ncme-adaptation/</link>
      <pubDate>Sat, 01 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/publication/2017-ncme-adaptation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Previewing the 2017 Men&#39;s NCAA Basketball Tournament</title>
      <link>https://wjakethompson.github.io/post/2017-03-13-march-madness-preview/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wjakethompson.github.io/post/2017-03-13-march-madness-preview/</guid>
      <description>&lt;p&gt;March Madness officially tips off tomorrow with the First Four games in Dayton before the round of 64 begins on Thursday. In this post, we’ll look at each team’s chance of advancing and winning the national title. We’ll also look at who was help and hurt most by how the committee seeded the tournament.&lt;/p&gt;
&lt;p&gt;As always, the code and data for this post are available on my &lt;a href=&#34;https://github.com/wjakethompson/wjakethompson.github.io&#34;&gt;Github&lt;/a&gt; page.&lt;/p&gt;
&lt;div id=&#34;the-ratings&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Ratings&lt;/h2&gt;
&lt;p&gt;The team ratings come from my sports analytics website, &lt;a href=&#34;http://www.hawklytics.com/&#34;&gt;Hawklytics&lt;/a&gt;. Using the composite ratings, we can calculate the probability of any team beating another using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Log5&#34;&gt;Log-5 formula&lt;/a&gt;. Using those probabilities, we can calculate the probability of any team advancing to each round.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(ggplot2)

bracket2017 &amp;lt;- readRDS(&amp;quot;datafiles/2017bracket.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;round-by-round-probabilities&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Round by Round Probabilities&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bracket2017 %&amp;gt;%
  select(Seed, School, Region, Round_3:Champion) %&amp;gt;%
  knitr::kable(digits = 3, col.names = gsub(&amp;quot;_&amp;quot;, &amp;quot; &amp;quot;, colnames(.)),
    align = &amp;quot;c&amp;quot;, booktabs = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Seed&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;School&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Round 3&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Sweet 16&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Elite 8&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Final 4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Final&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Champion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Gonzaga&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.976&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.825&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.539&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.399&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.245&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.158&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;North Carolina&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.976&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.811&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.606&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.371&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.226&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.119&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Villanova&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.977&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.712&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.418&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.277&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.163&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Louisville&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.962&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.636&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.423&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.257&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.143&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.072&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West Virginia&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.909&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.651&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.311&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.208&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.110&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.061&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Kentucky&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.952&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.571&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.375&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.210&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.119&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.058&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Kansas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.958&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.703&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.415&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.224&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.114&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.052&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Virginia&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.875&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.521&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.267&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.165&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.090&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.051&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Duke&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.942&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.665&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.375&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.165&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.078&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.040&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Florida&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.866&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.433&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.201&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.114&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.057&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.030&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Wichita State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.762&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.368&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.228&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.119&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.063&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.028&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Purdue&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.825&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.493&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.261&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.130&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.061&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.025&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Baylor&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.888&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.510&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.274&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.111&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.049&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.023&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Oregon&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.910&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.584&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.261&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.130&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.058&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.023&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Florida State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.896&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.627&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.344&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.125&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.050&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Southern Methodist&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.787&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.417&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.219&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.086&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.037&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.017&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Saint Mary’s (CA)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.736&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.431&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.250&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.091&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.037&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Iowa State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.770&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.401&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.197&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.091&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.039&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.015&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Butler&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.884&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.583&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.220&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.091&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.037&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UCLA&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.907&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.485&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.190&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.081&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.034&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Arizona&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.925&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.471&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.248&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.079&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.028&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Cincinnati&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.649&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.360&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.147&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.065&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.029&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Wisconsin&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.732&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.244&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.098&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.047&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.020&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Michigan&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.536&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.202&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.106&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.049&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.020&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Notre Dame&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.763&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.287&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.094&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.047&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.017&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Creighton&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.634&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.282&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.100&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.040&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.014&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Oklahoma State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.464&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.160&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.078&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.034&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.013&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Miami (FL)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.573&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.181&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.069&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.023&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.007&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Minnesota&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.602&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.258&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.071&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.022&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.006&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South Carolina&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.503&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.165&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.059&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.015&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Marquette&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.497&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.162&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.057&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.014&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Xavier&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.544&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.200&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.073&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.016&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Arkansas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.532&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.104&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.042&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.011&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Kansas State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.190&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.080&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.023&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.007&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Vanderbilt&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.507&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.088&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.025&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.009&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Michigan State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.427&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.111&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.035&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.010&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Northwestern&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.493&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.084&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.023&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.008&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Maryland&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.456&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.151&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.050&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.009&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Rhode Island&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.366&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.120&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.029&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.008&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;11a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Wake Forest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.162&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.065&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.017&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.005&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Seton Hall&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.468&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.083&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.031&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.007&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Dayton&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.238&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.057&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.019&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.005&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Virginia Commonwealth&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.264&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.092&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.032&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.006&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Middle Tennessee&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.398&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.135&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.028&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.006&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Virginia Tech&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.268&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.043&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.009&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Nevada&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.230&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.061&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.014&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Providence&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.119&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.032&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.008&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Princeton&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.237&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.042&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.006&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Vermont&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.175&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.045&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.009&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;11a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Southern California&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.094&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.023&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.005&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;North Carolina-Wilmington&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.125&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.025&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East Tennessee State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.134&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.021&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Bucknell&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.091&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.020&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;New Mexico State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.112&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.018&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Florida Gulf Coast&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.104&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.022&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Winthrop&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.116&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.024&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.002&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Iona&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.090&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.014&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Kent State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.093&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.010&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Troy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.058&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.007&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Northern Kentucky&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.048&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;North Dakota&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.075&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.006&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;North Carolina Central&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.031&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.004&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Jacksonville State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.038&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South Dakota State&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.024&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Texas Southern&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.024&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.003&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;16a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;New Orleans&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.013&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;16a&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UC-Davis&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.011&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Mount St. Mary’s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.010&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Gonzaga comes in as the favorite using my ratings with a 15.8% chance winning the title, followed by North Carolina and overall number 1 seed Villanova. Kansas, the other number 1 seed is the 7th most likely team to cut down the nets with a 5.2% chance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;region-difficulty&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Region Difficulty&lt;/h2&gt;
&lt;p&gt;To see who got help and hurt by their seeding, we can first look at the talent level in each region. To do this, I’ll take the average offensive and defensive rating of all the teams in a region, and then calculate a net rating. To keep the extra teams playing in the First Four from bringing down the region average, I’ll keep only favorite from each of the play in games.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bracket2017 %&amp;gt;%
  filter(!grepl(&amp;quot;a&amp;quot;, Seed)) %&amp;gt;%
  group_by(Region) %&amp;gt;%
  summarize(Offense = mean(Offense), Defense = mean(Defense)) %&amp;gt;%
  mutate(Net = Offense - Defense) %&amp;gt;%
  arrange(desc(Net)) %&amp;gt;%
  knitr::kable(digits = 2, align = &amp;quot;c&amp;quot;, booktabs = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Offense&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Defense&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Net&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;113.21&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;93.71&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;19.50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;113.43&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;94.62&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;18.81&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;112.41&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;94.76&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;17.66&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;112.24&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;94.95&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;17.29&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Villanova and Kansas, although the top two seeds in the tournament, weren’t given any favors, as they ended up in the two toughest regions in field. North Carolina, on the other hand, has the easiest region using these ratings.&lt;/p&gt;
&lt;p&gt;We can also look at the direct impact of the seeding process. Using the consensus bracket from the &lt;a href=&#34;http://www.bracketmatrix.com/&#34;&gt;Bracket Matrix&lt;/a&gt;, we can get a good gauge of where teams should have been seeded. I have calculated the probability of each team making the Final Four using the consensus bracket so we can compare these numbers to the probabilities from the real bracket.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;seeding &amp;lt;- bracket2017 %&amp;gt;%
  select(Seed, School, Region, Con_Final4, Final_4) %&amp;gt;%
  mutate(Change = Final_4 - Con_Final4) %&amp;gt;%
  select(-(Con_Final4:Final_4)) %&amp;gt;%
  arrange(desc(Change))

knitr::kable(head(seeding), digits = 3, align = &amp;quot;c&amp;quot;, booktabs = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Seed&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;School&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;North Carolina&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.073&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Kansas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.064&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Gonzaga&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.046&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West Virginia&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;West&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.036&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Butler&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.033&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Louisville&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Midwest&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0.033&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Although Kansas is in the second hardest region, they are 6.4% more likely to make the Final Four under the real bracket compared to the consensus bracket. This is because the bottom half of the Midwest region is much stronger relative to other regions, while the top half is slightly easier. Thus, the region as a whole is strong, but Kansas would only have to beat one of the teams from the bottom half in order to advance to the Final Four. Unsurprisingly, North Carolina, who is in the easiest region, benefits the most from the real seeding. They are 7.3% more likely to make the Final Four than when using the consensus bracket.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(tail(seeding), digits = 3, align = &amp;quot;c&amp;quot;, booktabs = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;center&#34;&gt;Seed&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;School&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Region&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Change&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Wisconsin&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-0.020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Baylor&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-0.038&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Duke&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-0.054&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Florida&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-0.056&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Kentucky&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;South&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-0.059&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Villanova&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;East&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-0.129&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;On the other end of the spectrum, Villanova was hurt the most by the real bracket by far. They are 12.9% less likely to make the Final Four than if the consensus bracket were used. In fact, this list is dominated by good teams who were all placed in the East region, and therefore have to fight each other to get out. The exception is Kentucky, who is 5.9% less likely to make the Final Four after drawing potential matchups with Wichita State, UCLA, and North Carolina.&lt;/p&gt;
&lt;p&gt;&lt;details&gt;&lt;summary&gt;Session info&lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::session_info()
#&amp;gt; Session info -------------------------------------------------------------
#&amp;gt;  setting  value                       
#&amp;gt;  version  R version 3.4.1 (2017-06-30)
#&amp;gt;  system   x86_64, darwin15.6.0        
#&amp;gt;  ui       X11                         
#&amp;gt;  language (EN)                        
#&amp;gt;  collate  en_US.UTF-8                 
#&amp;gt;  tz       America/Chicago             
#&amp;gt;  date     2017-08-30
#&amp;gt; Packages -----------------------------------------------------------------
#&amp;gt;  package    * version    date       source                            
#&amp;gt;  assertthat   0.2.0      2017-04-11 CRAN (R 3.4.0)                    
#&amp;gt;  backports    1.1.0      2017-05-22 CRAN (R 3.4.0)                    
#&amp;gt;  base       * 3.4.1      2017-07-07 local                             
#&amp;gt;  bindr        0.1        2016-11-13 cran (@0.1)                       
#&amp;gt;  bindrcpp   * 0.2        2017-06-17 cran (@0.2)                       
#&amp;gt;  blogdown     0.1.3      2017-08-30 Github (rstudio/blogdown@45860c7) 
#&amp;gt;  bookdown     0.5        2017-08-20 CRAN (R 3.4.1)                    
#&amp;gt;  codetools    0.2-15     2016-10-05 CRAN (R 3.4.1)                    
#&amp;gt;  colorspace   1.3-2      2016-12-14 CRAN (R 3.4.0)                    
#&amp;gt;  compiler     3.4.1      2017-07-07 local                             
#&amp;gt;  datasets   * 3.4.1      2017-07-07 local                             
#&amp;gt;  devtools     1.13.3     2017-08-02 cran (@1.13.3)                    
#&amp;gt;  digest       0.6.12     2017-01-27 CRAN (R 3.4.0)                    
#&amp;gt;  dplyr      * 0.7.2      2017-07-20 CRAN (R 3.4.1)                    
#&amp;gt;  evaluate     0.10.1     2017-06-24 cran (@0.10.1)                    
#&amp;gt;  ggplot2    * 2.2.1      2016-12-30 CRAN (R 3.3.2)                    
#&amp;gt;  glue         1.1.1      2017-06-21 cran (@1.1.1)                     
#&amp;gt;  graphics   * 3.4.1      2017-07-07 local                             
#&amp;gt;  grDevices  * 3.4.1      2017-07-07 local                             
#&amp;gt;  grid         3.4.1      2017-07-07 local                             
#&amp;gt;  gtable       0.2.0      2016-02-26 CRAN (R 3.4.0)                    
#&amp;gt;  highr        0.6        2016-05-09 CRAN (R 3.4.0)                    
#&amp;gt;  htmltools    0.3.6      2017-04-28 CRAN (R 3.4.0)                    
#&amp;gt;  knitr      * 1.17       2017-08-10 cran (@1.17)                      
#&amp;gt;  lazyeval     0.2.0      2016-06-12 CRAN (R 3.4.0)                    
#&amp;gt;  magrittr     1.5        2014-11-22 CRAN (R 3.4.0)                    
#&amp;gt;  memoise      1.1.0      2017-04-21 CRAN (R 3.4.0)                    
#&amp;gt;  methods    * 3.4.1      2017-07-07 local                             
#&amp;gt;  munsell      0.4.3      2016-02-13 CRAN (R 3.4.0)                    
#&amp;gt;  pkgconfig    2.0.1      2017-03-21 cran (@2.0.1)                     
#&amp;gt;  plyr         1.8.4      2016-06-08 CRAN (R 3.4.0)                    
#&amp;gt;  R6           2.2.2      2017-06-17 cran (@2.2.2)                     
#&amp;gt;  Rcpp         0.12.12    2017-07-15 CRAN (R 3.4.1)                    
#&amp;gt;  rlang        0.1.2.9000 2017-08-30 Github (hadley/rlang@f20124b)     
#&amp;gt;  rmarkdown    1.6.0.9001 2017-08-30 Github (rstudio/rmarkdown@e22703a)
#&amp;gt;  rprojroot    1.2        2017-01-16 CRAN (R 3.4.0)                    
#&amp;gt;  scales       0.5.0.9000 2017-08-30 Github (hadley/scales@d767915)    
#&amp;gt;  stats      * 3.4.1      2017-07-07 local                             
#&amp;gt;  stringi      1.1.5      2017-04-07 CRAN (R 3.4.0)                    
#&amp;gt;  stringr      1.2.0      2017-02-18 CRAN (R 3.4.0)                    
#&amp;gt;  tibble       1.3.4      2017-08-22 cran (@1.3.4)                     
#&amp;gt;  tools        3.4.1      2017-07-07 local                             
#&amp;gt;  utils      * 3.4.1      2017-07-07 local                             
#&amp;gt;  withr        2.0.0      2017-08-13 Github (jimhester/withr@190d293)  
#&amp;gt;  yaml         2.1.14     2016-11-12 CRAN (R 3.4.0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/details&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
